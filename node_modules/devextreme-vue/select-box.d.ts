/*!
 * devextreme-vue
 * Version: 19.2.5
 * Build date: Mon Dec 16 2019
 *
 * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

import SelectBox, { IOptions } from "devextreme/ui/select_box";
declare type AccessibleOptions = Pick<IOptions, "acceptCustomValue" | "accessKey" | "activeStateEnabled" | "buttons" | "dataSource" | "deferRendering" | "disabled" | "displayExpr" | "displayValue" | "dropDownButtonTemplate" | "elementAttr" | "fieldTemplate" | "focusStateEnabled" | "grouped" | "groupTemplate" | "height" | "hint" | "hoverStateEnabled" | "inputAttr" | "isValid" | "items" | "itemTemplate" | "maxLength" | "minSearchLength" | "name" | "noDataText" | "onChange" | "onClosed" | "onContentReady" | "onCopy" | "onCustomItemCreating" | "onCut" | "onDisposing" | "onEnterKey" | "onFocusIn" | "onFocusOut" | "onInitialized" | "onInput" | "onItemClick" | "onKeyDown" | "onKeyPress" | "onKeyUp" | "onOpened" | "onOptionChanged" | "onPaste" | "onSelectionChanged" | "onValueChanged" | "opened" | "openOnFieldClick" | "placeholder" | "readOnly" | "rtlEnabled" | "searchEnabled" | "searchExpr" | "searchMode" | "searchTimeout" | "selectedItem" | "showClearButton" | "showDataBeforeSearch" | "showDropDownButton" | "showSelectionControls" | "spellcheck" | "stylingMode" | "tabIndex" | "text" | "validationError" | "validationErrors" | "validationMessageMode" | "validationStatus" | "value" | "valueChangeEvent" | "valueExpr" | "visible" | "width" | "wrapItemText">;
interface DxSelectBox extends AccessibleOptions {
    readonly instance?: SelectBox;
}
declare const DxSelectBox: import("vue/types/vue").ExtendedVue<VueType.default, unknown, unknown, {
    instance: SelectBox;
}, {
    acceptCustomValue: boolean;
    accessKey: string;
    activeStateEnabled: boolean;
    buttons: unknown[];
    dataSource: any;
    deferRendering: boolean;
    disabled: boolean;
    displayExpr: TimerHandler;
    displayValue: string;
    dropDownButtonTemplate: unknown;
    elementAttr: any;
    fieldTemplate: unknown;
    focusStateEnabled: boolean;
    grouped: boolean;
    groupTemplate: unknown;
    height: string | number | Function;
    hint: string;
    hoverStateEnabled: boolean;
    inputAttr: any;
    isValid: boolean;
    items: unknown[];
    itemTemplate: unknown;
    maxLength: string | number;
    minSearchLength: number;
    name: string;
    noDataText: string;
    onChange: Function;
    onClosed: Function;
    onContentReady: Function;
    onCopy: Function;
    onCustomItemCreating: Function;
    onCut: Function;
    onDisposing: Function;
    onEnterKey: Function;
    onFocusIn: Function;
    onFocusOut: Function;
    onInitialized: Function;
    onInput: Function;
    onItemClick: Function;
    onKeyDown: Function;
    onKeyPress: Function;
    onKeyUp: Function;
    onOpened: Function;
    onOptionChanged: Function;
    onPaste: Function;
    onSelectionChanged: Function;
    onValueChanged: Function;
    opened: boolean;
    openOnFieldClick: boolean;
    placeholder: string;
    readOnly: boolean;
    rtlEnabled: boolean;
    searchEnabled: boolean;
    searchExpr: string | Function | unknown[];
    searchMode: string;
    searchTimeout: number;
    selectedItem: unknown;
    showClearButton: boolean;
    showDataBeforeSearch: boolean;
    showDropDownButton: boolean;
    showSelectionControls: boolean;
    spellcheck: boolean;
    stylingMode: string;
    tabIndex: number;
    text: string;
    validationError: any;
    validationErrors: unknown[];
    validationMessageMode: string;
    validationStatus: string;
    value: unknown;
    valueChangeEvent: string;
    valueExpr: TimerHandler;
    visible: boolean;
    width: string | number | Function;
    wrapItemText: boolean;
}>;
declare const DxButton: any;
declare const DxItem: any;
declare const DxOptions: any;
export default DxSelectBox;
export { DxSelectBox, DxButton, DxItem, DxOptions };
