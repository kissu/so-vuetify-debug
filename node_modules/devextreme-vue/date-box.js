/*!
 * devextreme-vue
 * Version: 19.2.5
 * Build date: Mon Dec 16 2019
 *
 * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var VueType = require("vue");
var Vue = VueType.default || VueType;
var date_box_1 = require("devextreme/ui/date_box");
var component_1 = require("./core/component");
var configuration_component_1 = require("./core/configuration-component");
var DxDateBox = Vue.extend({
    extends: component_1.DxComponent,
    props: {
        acceptCustomValue: Boolean,
        accessKey: String,
        activeStateEnabled: Boolean,
        adaptivityEnabled: Boolean,
        applyButtonText: String,
        applyValueMode: String,
        buttons: Array,
        calendarOptions: Object,
        cancelButtonText: String,
        dateOutOfRangeMessage: String,
        dateSerializationFormat: String,
        deferRendering: Boolean,
        disabled: Boolean,
        disabledDates: [Array, Function],
        displayFormat: [Object, Function, String],
        dropDownButtonTemplate: {},
        elementAttr: Object,
        focusStateEnabled: Boolean,
        height: [Function, Number, String],
        hint: String,
        hoverStateEnabled: Boolean,
        inputAttr: Object,
        interval: Number,
        invalidDateMessage: String,
        isValid: Boolean,
        max: {},
        maxLength: [Number, String],
        min: {},
        name: String,
        onChange: Function,
        onClosed: Function,
        onContentReady: Function,
        onCopy: Function,
        onCut: Function,
        onDisposing: Function,
        onEnterKey: Function,
        onFocusIn: Function,
        onFocusOut: Function,
        onInitialized: Function,
        onInput: Function,
        onKeyDown: Function,
        onKeyPress: Function,
        onKeyUp: Function,
        onOpened: Function,
        onOptionChanged: Function,
        onPaste: Function,
        onValueChanged: Function,
        opened: Boolean,
        openOnFieldClick: Boolean,
        pickerType: String,
        placeholder: String,
        readOnly: Boolean,
        rtlEnabled: Boolean,
        showAnalogClock: Boolean,
        showClearButton: Boolean,
        showDropDownButton: Boolean,
        spellcheck: Boolean,
        stylingMode: String,
        tabIndex: Number,
        text: String,
        type: String,
        useMaskBehavior: Boolean,
        validationError: Object,
        validationErrors: Array,
        validationMessageMode: String,
        validationStatus: String,
        value: {},
        valueChangeEvent: String,
        visible: Boolean,
        width: [Function, Number, String]
    },
    model: { prop: "value", event: "update:value" },
    computed: {
        instance: function () {
            return this.$_instance;
        }
    },
    beforeCreate: function () {
        this.$_WidgetClass = date_box_1.default;
        this.$_expectedChildren = {
            button: { isCollectionItem: true, optionName: "buttons" },
            calendarOptions: { isCollectionItem: false, optionName: "calendarOptions" },
            displayFormat: { isCollectionItem: false, optionName: "displayFormat" }
        };
    }
});
exports.DxDateBox = DxDateBox;
var DxButton = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        location: String,
        name: String,
        options: Object
    }
});
exports.DxButton = DxButton;
DxButton.$_optionName = "buttons";
DxButton.$_isCollectionItem = true;
DxButton.$_expectedChildren = {
    options: { isCollectionItem: false, optionName: "options" }
};
var DxCalendarOptions = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        accessKey: String,
        activeStateEnabled: Boolean,
        bindingOptions: Object,
        cellTemplate: {},
        currentDate: {},
        dateSerializationFormat: String,
        disabled: Boolean,
        disabledDates: [Array, Function],
        elementAttr: Object,
        firstDayOfWeek: {
            type: Number,
            validator: function (v) { return typeof (v) !== "number" || [
                0,
                1,
                2,
                3,
                4,
                5,
                6
            ].indexOf(v) !== -1; }
        },
        focusStateEnabled: Boolean,
        height: [Function, Number, String],
        hint: String,
        hoverStateEnabled: Boolean,
        isValid: Boolean,
        max: {},
        maxZoomLevel: String,
        min: {},
        minZoomLevel: String,
        name: String,
        onContentReady: Function,
        onDisposing: Function,
        onFocusIn: Function,
        onFocusOut: Function,
        onInitialized: Function,
        onOptionChanged: Function,
        onValueChanged: Function,
        readOnly: Boolean,
        rtlEnabled: Boolean,
        showTodayButton: Boolean,
        tabIndex: Number,
        validationError: Object,
        validationErrors: Array,
        validationMessageMode: String,
        validationStatus: String,
        value: {},
        visible: Boolean,
        width: [Function, Number, String],
        zoomLevel: String
    }
});
exports.DxCalendarOptions = DxCalendarOptions;
DxCalendarOptions.$_optionName = "calendarOptions";
var DxDisplayFormat = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        currency: String,
        formatter: Function,
        parser: Function,
        precision: Number,
        type: String
    }
});
exports.DxDisplayFormat = DxDisplayFormat;
DxDisplayFormat.$_optionName = "displayFormat";
var DxOptions = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        accessKey: String,
        activeStateEnabled: Boolean,
        bindingOptions: Object,
        disabled: Boolean,
        elementAttr: Object,
        focusStateEnabled: Boolean,
        height: [Function, Number, String],
        hint: String,
        hoverStateEnabled: Boolean,
        icon: String,
        onClick: Function,
        onContentReady: Function,
        onDisposing: Function,
        onFocusIn: Function,
        onFocusOut: Function,
        onInitialized: Function,
        onOptionChanged: Function,
        rtlEnabled: Boolean,
        stylingMode: String,
        tabIndex: Number,
        template: {},
        text: String,
        type: String,
        useSubmitBehavior: Boolean,
        validationGroup: String,
        visible: Boolean,
        width: [Function, Number, String]
    }
});
exports.DxOptions = DxOptions;
DxOptions.$_optionName = "options";
exports.default = DxDateBox;
