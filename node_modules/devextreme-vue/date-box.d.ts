/*!
 * devextreme-vue
 * Version: 19.2.5
 * Build date: Mon Dec 16 2019
 *
 * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

import DateBox, { IOptions } from "devextreme/ui/date_box";
declare type AccessibleOptions = Pick<IOptions, "acceptCustomValue" | "accessKey" | "activeStateEnabled" | "adaptivityEnabled" | "applyButtonText" | "applyValueMode" | "buttons" | "calendarOptions" | "cancelButtonText" | "dateOutOfRangeMessage" | "dateSerializationFormat" | "deferRendering" | "disabled" | "disabledDates" | "displayFormat" | "dropDownButtonTemplate" | "elementAttr" | "focusStateEnabled" | "height" | "hint" | "hoverStateEnabled" | "inputAttr" | "interval" | "invalidDateMessage" | "isValid" | "max" | "maxLength" | "min" | "name" | "onChange" | "onClosed" | "onContentReady" | "onCopy" | "onCut" | "onDisposing" | "onEnterKey" | "onFocusIn" | "onFocusOut" | "onInitialized" | "onInput" | "onKeyDown" | "onKeyPress" | "onKeyUp" | "onOpened" | "onOptionChanged" | "onPaste" | "onValueChanged" | "opened" | "openOnFieldClick" | "pickerType" | "placeholder" | "readOnly" | "rtlEnabled" | "showAnalogClock" | "showClearButton" | "showDropDownButton" | "spellcheck" | "stylingMode" | "tabIndex" | "text" | "type" | "useMaskBehavior" | "validationError" | "validationErrors" | "validationMessageMode" | "validationStatus" | "value" | "valueChangeEvent" | "visible" | "width">;
interface DxDateBox extends AccessibleOptions {
    readonly instance?: DateBox;
}
declare const DxDateBox: import("vue/types/vue").ExtendedVue<VueType.default, unknown, unknown, {
    instance: DateBox;
}, {
    acceptCustomValue: boolean;
    accessKey: string;
    activeStateEnabled: boolean;
    adaptivityEnabled: boolean;
    applyButtonText: string;
    applyValueMode: string;
    buttons: unknown[];
    calendarOptions: any;
    cancelButtonText: string;
    dateOutOfRangeMessage: string;
    dateSerializationFormat: string;
    deferRendering: boolean;
    disabled: boolean;
    disabledDates: Function | unknown[];
    displayFormat: any;
    dropDownButtonTemplate: unknown;
    elementAttr: any;
    focusStateEnabled: boolean;
    height: string | number | Function;
    hint: string;
    hoverStateEnabled: boolean;
    inputAttr: any;
    interval: number;
    invalidDateMessage: string;
    isValid: boolean;
    max: unknown;
    maxLength: string | number;
    min: unknown;
    name: string;
    onChange: Function;
    onClosed: Function;
    onContentReady: Function;
    onCopy: Function;
    onCut: Function;
    onDisposing: Function;
    onEnterKey: Function;
    onFocusIn: Function;
    onFocusOut: Function;
    onInitialized: Function;
    onInput: Function;
    onKeyDown: Function;
    onKeyPress: Function;
    onKeyUp: Function;
    onOpened: Function;
    onOptionChanged: Function;
    onPaste: Function;
    onValueChanged: Function;
    opened: boolean;
    openOnFieldClick: boolean;
    pickerType: string;
    placeholder: string;
    readOnly: boolean;
    rtlEnabled: boolean;
    showAnalogClock: boolean;
    showClearButton: boolean;
    showDropDownButton: boolean;
    spellcheck: boolean;
    stylingMode: string;
    tabIndex: number;
    text: string;
    type: string;
    useMaskBehavior: boolean;
    validationError: any;
    validationErrors: unknown[];
    validationMessageMode: string;
    validationStatus: string;
    value: unknown;
    valueChangeEvent: string;
    visible: boolean;
    width: string | number | Function;
}>;
declare const DxButton: any;
declare const DxCalendarOptions: any;
declare const DxDisplayFormat: any;
declare const DxOptions: any;
export default DxDateBox;
export { DxDateBox, DxButton, DxCalendarOptions, DxDisplayFormat, DxOptions };
