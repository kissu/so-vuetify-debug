/*!
 * devextreme-vue
 * Version: 19.2.5
 * Build date: Mon Dec 16 2019
 *
 * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

import VectorMap, { IOptions } from "devextreme/viz/vector_map";
declare type AccessibleOptions = Pick<IOptions, "background" | "bounds" | "center" | "controlBar" | "disabled" | "elementAttr" | "export" | "layers" | "legends" | "loadingIndicator" | "maxZoomFactor" | "onCenterChanged" | "onClick" | "onDisposing" | "onDrawn" | "onExported" | "onExporting" | "onFileSaving" | "onIncidentOccurred" | "onInitialized" | "onOptionChanged" | "onSelectionChanged" | "onTooltipHidden" | "onTooltipShown" | "onZoomFactorChanged" | "panningEnabled" | "pathModified" | "projection" | "redrawOnResize" | "rtlEnabled" | "size" | "theme" | "title" | "tooltip" | "touchEnabled" | "wheelEnabled" | "zoomFactor" | "zoomingEnabled">;
interface DxVectorMap extends AccessibleOptions {
    readonly instance?: VectorMap;
}
declare const DxVectorMap: import("vue/types/vue").ExtendedVue<VueType.default, unknown, unknown, {
    instance: VectorMap;
}, {
    background: any;
    bounds: unknown[];
    center: unknown[];
    controlBar: any;
    disabled: boolean;
    elementAttr: any;
    export: any;
    layers: any;
    legends: unknown[];
    loadingIndicator: any;
    maxZoomFactor: number;
    onCenterChanged: Function;
    onClick: TimerHandler;
    onDisposing: Function;
    onDrawn: Function;
    onExported: Function;
    onExporting: Function;
    onFileSaving: Function;
    onIncidentOccurred: Function;
    onInitialized: Function;
    onOptionChanged: Function;
    onSelectionChanged: Function;
    onTooltipHidden: Function;
    onTooltipShown: Function;
    onZoomFactorChanged: Function;
    panningEnabled: boolean;
    pathModified: boolean;
    projection: any;
    redrawOnResize: boolean;
    rtlEnabled: boolean;
    size: any;
    theme: string;
    title: any;
    tooltip: any;
    touchEnabled: boolean;
    wheelEnabled: boolean;
    zoomFactor: number;
    zoomingEnabled: boolean;
}>;
declare const DxBackground: any;
declare const DxBorder: any;
declare const DxControlBar: any;
declare const DxExport: any;
declare const DxFont: any;
declare const DxFormat: any;
declare const DxLabel: any;
declare const DxLayer: any;
declare const DxLegend: any;
declare const DxLegendBorder: any;
declare const DxLegendTitle: any;
declare const DxLegendTitleSubtitle: any;
declare const DxLoadingIndicator: any;
declare const DxMargin: any;
declare const DxProjection: any;
declare const DxShadow: any;
declare const DxSize: any;
declare const DxSource: any;
declare const DxSubtitle: any;
declare const DxTitle: any;
declare const DxTooltip: any;
declare const DxTooltipBorder: any;
declare const DxVectorMapTitle: any;
declare const DxVectorMapTitleSubtitle: any;
export default DxVectorMap;
export { DxVectorMap, DxBackground, DxBorder, DxControlBar, DxExport, DxFont, DxFormat, DxLabel, DxLayer, DxLegend, DxLegendBorder, DxLegendTitle, DxLegendTitleSubtitle, DxLoadingIndicator, DxMargin, DxProjection, DxShadow, DxSize, DxSource, DxSubtitle, DxTitle, DxTooltip, DxTooltipBorder, DxVectorMapTitle, DxVectorMapTitleSubtitle };
