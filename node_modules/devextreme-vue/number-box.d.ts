/*!
 * devextreme-vue
 * Version: 19.2.5
 * Build date: Mon Dec 16 2019
 *
 * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

import NumberBox, { IOptions } from "devextreme/ui/number_box";
declare type AccessibleOptions = Pick<IOptions, "accessKey" | "activeStateEnabled" | "buttons" | "disabled" | "elementAttr" | "focusStateEnabled" | "format" | "height" | "hint" | "hoverStateEnabled" | "inputAttr" | "invalidValueMessage" | "isValid" | "max" | "min" | "mode" | "name" | "onChange" | "onContentReady" | "onCopy" | "onCut" | "onDisposing" | "onEnterKey" | "onFocusIn" | "onFocusOut" | "onInitialized" | "onInput" | "onKeyDown" | "onKeyPress" | "onKeyUp" | "onOptionChanged" | "onPaste" | "onValueChanged" | "placeholder" | "readOnly" | "rtlEnabled" | "showClearButton" | "showSpinButtons" | "step" | "stylingMode" | "tabIndex" | "text" | "useLargeSpinButtons" | "validationError" | "validationErrors" | "validationMessageMode" | "validationStatus" | "value" | "valueChangeEvent" | "visible" | "width">;
interface DxNumberBox extends AccessibleOptions {
    readonly instance?: NumberBox;
}
declare const DxNumberBox: import("vue/types/vue").ExtendedVue<VueType.default, unknown, unknown, {
    instance: NumberBox;
}, {
    accessKey: string;
    activeStateEnabled: boolean;
    buttons: unknown[];
    disabled: boolean;
    elementAttr: any;
    focusStateEnabled: boolean;
    format: any;
    height: string | number | Function;
    hint: string;
    hoverStateEnabled: boolean;
    inputAttr: any;
    invalidValueMessage: string;
    isValid: boolean;
    max: number;
    min: number;
    mode: string;
    name: string;
    onChange: Function;
    onContentReady: Function;
    onCopy: Function;
    onCut: Function;
    onDisposing: Function;
    onEnterKey: Function;
    onFocusIn: Function;
    onFocusOut: Function;
    onInitialized: Function;
    onInput: Function;
    onKeyDown: Function;
    onKeyPress: Function;
    onKeyUp: Function;
    onOptionChanged: Function;
    onPaste: Function;
    onValueChanged: Function;
    placeholder: string;
    readOnly: boolean;
    rtlEnabled: boolean;
    showClearButton: boolean;
    showSpinButtons: boolean;
    step: number;
    stylingMode: string;
    tabIndex: number;
    text: string;
    useLargeSpinButtons: boolean;
    validationError: any;
    validationErrors: unknown[];
    validationMessageMode: string;
    validationStatus: string;
    value: number;
    valueChangeEvent: string;
    visible: boolean;
    width: string | number | Function;
}>;
declare const DxButton: any;
declare const DxFormat: any;
declare const DxOptions: any;
export default DxNumberBox;
export { DxNumberBox, DxButton, DxFormat, DxOptions };
